
import { jsPDF } from 'jspdf';
import { format } from 'date-fns';
import { TourItinerary, DayItinerary } from '@/lib/types';

export const exportItineraryToPdf = (itinerary: TourItinerary) => {
  if (!itinerary || !itinerary.days || itinerary.days.length === 0) {
    console.error('No itinerary data to export');
    return;
  }

  const doc = new jsPDF();
  const startDate = itinerary.start_date ? new Date(itinerary.start_date) : new Date();
  
  // Set document properties
  doc.setProperties({
    title: `${itinerary.name} - Itinerary`,
    subject: 'Travel Itinerary',
    author: 'TourGenius',
    creator: 'TourGenius'
  });
  
  // Add title
  doc.setFontSize(22);
  doc.setTextColor(33, 33, 33);
  doc.text(itinerary.name, 105, 20, { align: 'center' });
  
  // Add subtitle
  doc.setFontSize(12);
  doc.setTextColor(100, 100, 100);
  doc.text(`Travel Itinerary for ${itinerary.numberOfPeople} person(s)`, 105, 30, { align: 'center' });
  doc.text(`Starting on ${format(startDate, 'MMMM d, yyyy')}`, 105, 37, { align: 'center' });
  
  // Set font for content
  doc.setFontSize(10);
  doc.setTextColor(33, 33, 33);
  
  let yPosition = 50;
  const pageWidth = doc.internal.pageSize.width;
  const margin = 20;
  const contentWidth = pageWidth - 2 * margin;
  
  // Generate itinerary for each day
  itinerary.days.forEach((day, index) => {
    // Check if we need a new page
    if (yPosition > 260) {
      doc.addPage();
      yPosition = 20;
    }
    
    // Day header
    doc.setFontSize(14);
    doc.setTextColor(33, 33, 33);
    doc.text(`Day ${day.day}`, margin, yPosition);
    yPosition += 10;
    
    // Draw day content
    yPosition = drawDayContent(doc, day, yPosition, margin, contentWidth);
    
    // Add a little space between days
    yPosition += 10;
    
    // Add a separator line between days (except after the last day)
    if (index < itinerary.days.length - 1) {
      doc.setDrawColor(200, 200, 200);
      doc.line(margin, yPosition - 5, pageWidth - margin, yPosition - 5);
    }
  });
  
  // Add tour guides if any
  if (itinerary.tourGuides && itinerary.tourGuides.length > 0) {
    // Check if we need a new page
    if (yPosition > 240) {
      doc.addPage();
      yPosition = 20;
    }
    
    doc.setFontSize(14);
    doc.text('Tour Guides', margin, yPosition);
    yPosition += 10;
    
    itinerary.tourGuides.forEach(guide => {
      doc.setFontSize(11);
      doc.text(`• ${guide.name} - ${guide.expertise}`, margin, yPosition);
      yPosition += 5;
      
      if (guide.languages && guide.languages.length > 0) {
        doc.setFontSize(10);
        doc.setTextColor(100, 100, 100);
        doc.text(`  Languages: ${guide.languages.join(', ')}`, margin, yPosition);
        yPosition += 7;
      } else {
        yPosition += 2;
      }
    });
  }
  
  // Add footer
  const pageCount = doc.internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text(
      `Generated by TourGenius on ${format(new Date(), 'MMMM d, yyyy')}`,
      pageWidth / 2,
      doc.internal.pageSize.height - 10,
      { align: 'center' }
    );
    doc.text(`Page ${i} of ${pageCount}`, pageWidth - margin, doc.internal.pageSize.height - 10, { align: 'right' });
  }
  
  // Save the PDF
  doc.save(`${itinerary.name.replace(/\s+/g, '_')}_itinerary.pdf`);
};

// Function to draw a day's content
const drawDayContent = (doc: jsPDF, day: DayItinerary, yPosition: number, margin: number, contentWidth: number): number => {
  const textX = margin + 15; // Indentation for text
  const timeX = margin + 5; // Position for time
  
  // Destinations
  if (day.destinations && day.destinations.length > 0) {
    doc.setFontSize(12);
    doc.setTextColor(44, 62, 80);
    doc.text('Destinations:', margin, yPosition);
    yPosition += 6;
    
    day.destinations.forEach(destination => {
      // Time (if available)
      if (destination.time) {
        doc.setFontSize(9);
        doc.setTextColor(100, 100, 100);
        doc.text(destination.time, timeX, yPosition);
      }
      
      // Destination name
      doc.setFontSize(10);
      doc.setTextColor(33, 33, 33);
      doc.text(`• ${destination.name}`, textX, yPosition);
      yPosition += 5;
      
      // Description (if available and not too long)
      if (destination.description && destination.description.length < 100) {
        doc.setFontSize(9);
        doc.setTextColor(100, 100, 100);
        doc.text(destination.description, textX + 5, yPosition);
        yPosition += 5;
      }
    });
    
    yPosition += 2;
  }
  
  // Hotel/Accommodation
  if (day.hotel) {
    doc.setFontSize(12);
    doc.setTextColor(44, 62, 80);
    doc.text('Accommodation:', margin, yPosition);
    yPosition += 6;
    
    // Time (if available)
    if (day.hotel.time) {
      doc.setFontSize(9);
      doc.setTextColor(100, 100, 100);
      doc.text(day.hotel.time, timeX, yPosition);
    }
    
    // Hotel name and details
    doc.setFontSize(10);
    doc.setTextColor(33, 33, 33);
    doc.text(`• ${day.hotel.name} (${day.hotel.stars}★)`, textX, yPosition);
    yPosition += 5;
    
    doc.setFontSize(9);
    doc.setTextColor(100, 100, 100);
    doc.text(`Location: ${day.hotel.location}`, textX + 5, yPosition);
    yPosition += 7;
  }
  
  // Meals
  if (day.meals && day.meals.length > 0) {
    doc.setFontSize(12);
    doc.setTextColor(44, 62, 80);
    doc.text('Meals:', margin, yPosition);
    yPosition += 6;
    
    day.meals.forEach(meal => {
      // Time (if available)
      if (meal.time) {
        doc.setFontSize(9);
        doc.setTextColor(100, 100, 100);
        doc.text(meal.time, timeX, yPosition);
      }
      
      // Meal details
      doc.setFontSize(10);
      doc.setTextColor(33, 33, 33);
      const mealType = meal.type.charAt(0).toUpperCase() + meal.type.slice(1);
      doc.text(`• ${mealType}: ${meal.description}`, textX, yPosition);
      yPosition += 5;
    });
    
    yPosition += 2;
  }
  
  // Transportation
  if (day.transportation || (day.transportationItems && day.transportationItems.length > 0)) {
    doc.setFontSize(12);
    doc.setTextColor(44, 62, 80);
    doc.text('Transportation:', margin, yPosition);
    yPosition += 6;
    
    // Main transportation
    if (day.transportation) {
      // Time (if available)
      if (day.transportation.time) {
        doc.setFontSize(9);
        doc.setTextColor(100, 100, 100);
        doc.text(day.transportation.time, timeX, yPosition);
      }
      
      // Transportation details
      doc.setFontSize(10);
      doc.setTextColor(33, 33, 33);
      const type = day.transportation.type ? 
        (day.transportation.type.charAt(0).toUpperCase() + day.transportation.type.slice(1)) : 
        'Transportation';
      doc.text(`• ${type}: ${day.transportation.description}`, textX, yPosition);
      yPosition += 5;
    }
    
    // Additional transportation items
    if (day.transportationItems && day.transportationItems.length > 0) {
      day.transportationItems.forEach(item => {
        // Time (if available)
        if (item.time) {
          doc.setFontSize(9);
          doc.setTextColor(100, 100, 100);
          doc.text(item.time, timeX, yPosition);
        }
        
        // Transportation details
        doc.setFontSize(10);
        doc.setTextColor(33, 33, 33);
        const type = item.type ? 
          (item.type.charAt(0).toUpperCase() + item.type.slice(1)) : 
          'Transportation';
        doc.text(`• ${type}: ${item.description}`, textX, yPosition);
        yPosition += 5;
      });
    }
    
    yPosition += 2;
  }
  
  return yPosition;
};
